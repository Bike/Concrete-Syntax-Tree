(cl:in-package #:concrete-syntax-tree-lambda-list-test)

(defun find-final-item (parser)
  (let ((initial-state (car (cst::all-states parser)))
        (final-state (car (cl:last (cst::all-states parser)))))
    (find-if (lambda (item)
               (let* ((rule (cst::rule item))
                      (len (length (cst::right-hand-side rule)))
                      (pos (cst::dot-position item)))
                 (and (eq (cst::left-hand-side (cst::rule item))
                          'cst::target)
                      (= pos len)
                      (eq (cst::origin item) initial-state))))
             (cst::items final-state))))

(defun assert-success (parser)
  (let ((item (find-final-item parser)))
    (assert (not (null item)))
    (car (cst::parse-trees item))))

(defun test-ordinary (lambda-list)
  (let* ((p (make-instance 'cst::parser
              :rules cst::*ordinary-lambda-list-grammar*
              :input lambda-list
              :lambda-list (make-instance 'cst::ordinary-lambda-list)
              :client nil)))
    (cst::parse p)
    (let ((result (assert-success p)))
      (compare-parse-trees result (parse-ordinary-lambda-list lambda-list)))))

(defun test-generic-function (lambda-list)
  (let* ((p (make-instance 'cst::parser
              :rules cst::*generic-function-lambda-list-grammar*
              :input lambda-list
              :lambda-list
              (make-instance 'cst::generic-function-lambda-list)
              :client nil)))
    (cst::parse p)
    (let ((result (assert-success p)))
      (compare-parse-trees
       result (parse-generic-function-lambda-list lambda-list)))))

(defun test-ordinary-lambda-lists ()
  (assert (test-ordinary '()))
  (assert (test-ordinary '(a)))
  (assert (test-ordinary '(a b)))
  (assert (test-ordinary '(&optional)))
  (assert (test-ordinary '(&optional a)))
  (assert (test-ordinary '(&optional a b)))
  (assert (test-ordinary '(&optional (a (f x)))))
  (assert (test-ordinary '(&optional (a (f x)) b)))
  (assert (test-ordinary '(&optional (a (f x) supplied-p))))
  (assert (test-ordinary '(a &optional)))
  (assert (test-ordinary '(a &optional b)))
  (assert (test-ordinary '(a &optional (b (f x)))))
  (assert (test-ordinary '(&rest a)))
  (assert (test-ordinary '(a &rest b)))
  (assert (test-ordinary '(a b &rest c)))
  (assert (test-ordinary '(&optional a &rest b)))
  (assert (test-ordinary '(&optional a (b) &rest c)))
  (assert (test-ordinary '(a &optional b &rest c)))
  (assert (test-ordinary '(&key)))
  (assert (test-ordinary '(&key a)))
  (assert (test-ordinary '(&key a b)))
  (assert (test-ordinary '(&key (a (f x)))))
  (assert (test-ordinary '(&key (a (f x) supplied-p))))
  (assert (test-ordinary '(&key ((:a a) (f x) supplied-p))))
  (assert (test-ordinary '(a &key)))
  (assert (test-ordinary '(a &key b)))
  (assert (test-ordinary '(b &key ((:a a) (f x) supplied-p))))
  (assert (test-ordinary '(b &optional c &key ((:a a) (f x) supplied-p))))
  (assert (test-ordinary '(&key &allow-other-keys)))
  (assert (test-ordinary '(&aux)))
  (assert (test-ordinary '(&aux a)))
  (assert (test-ordinary '(&aux (a (f x)))))
  (assert (test-ordinary '(&aux b (a (f x)))))
  (assert (test-ordinary '(b &aux a)))
  (assert (test-ordinary '(b &optional c &aux a)))
  (assert (test-ordinary '(b &optional c &key d &aux a)))
  (assert (test-ordinary '(b &optional c &key d &allow-other-keys &aux a))))

(defun test-generic-function-lambda-lists ()
  (assert (test-generic-function '()))
  (assert (test-generic-function '(a)))
  (assert (test-generic-function '(a b)))
  (assert (test-generic-function '(&optional)))
  (assert (test-generic-function '(&optional a)))
  (assert (test-generic-function '(&optional a b)))
  (assert (test-generic-function '(a &optional)))
  (assert (test-generic-function '(a &optional b)))
  (assert (test-generic-function '(&rest a)))
  (assert (test-generic-function '(a &rest b)))
  (assert (test-generic-function '(a b &rest c)))
  (assert (test-generic-function '(&optional a &rest b)))
  (assert (test-generic-function '(&optional a (b) &rest c)))
  (assert (test-generic-function '(a &optional b &rest c)))
  (assert (test-generic-function '(&key)))
  (assert (test-generic-function '(a &key b)))
  (assert (test-generic-function '(b &key ((:a a)))))
  (assert (test-generic-function '(b &optional c &key ((:a a)))))
  (assert (test-generic-function '(&key &allow-other-keys))))

(defun test ()
  (test-ordinary-lambda-lists)
  (test-generic-function-lambda-lists))
